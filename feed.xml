<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://whdvlf94.github.io/</id><title>공간</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-09-04T11:38:22+09:00</updated> <author> <name>JongPil Yoon</name> <uri>https://whdvlf94.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://whdvlf94.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://whdvlf94.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 JongPil Yoon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Docker] Docker 이미지 최적화(with Node.js) - (1/3)</title><link href="https://whdvlf94.github.io/posts/optimizing-base-image(node.js)/" rel="alternate" type="text/html" title="[Docker] Docker 이미지 최적화(with Node.js) - (1/3)" /><published>2023-08-17T00:00:00+09:00</published> <updated>2023-08-17T20:42:44+09:00</updated> <id>https://whdvlf94.github.io/posts/optimizing-base-image(node.js)/</id> <content src="https://whdvlf94.github.io/posts/optimizing-base-image(node.js)/" /> <author> <name>JongPil Yoon</name> </author> <category term="Infra" /> <category term="Docker" /> <summary> 목차 Default node image Docker Hub options Slimer images Alpine images Distroless images Conclusion Reference 이미지 크기와 취약성은 CI/CD 파이프라인 및 보안 태세에 큰 영향을 미칠 수 있기에 Base 이미지를 선택하는 것은 최적화를 위해 필요하다. Node.js 이미지 빌드 시 사용할 수 있는 옵션으로는 Core Node.js 팀에서 유지 관리하는 공식 Node.js 이미지, Docker Hub repository에서 제공하는 tag가 달린 이미지, Google에서 관리하는 distroless 이미지 등이 존재한다. 1 Default node image node Nod... </summary> </entry> <entry><title>[Docker] Docker Multi-stage builds - (2/3)</title><link href="https://whdvlf94.github.io/posts/multi-stage-builds/" rel="alternate" type="text/html" title="[Docker] Docker Multi-stage builds - (2/3)" /><published>2023-08-17T00:00:00+09:00</published> <updated>2023-08-17T20:42:44+09:00</updated> <id>https://whdvlf94.github.io/posts/multi-stage-builds/</id> <content src="https://whdvlf94.github.io/posts/multi-stage-builds/" /> <author> <name>JongPil Yoon</name> </author> <category term="Infra" /> <category term="Docker" /> <summary> 목차 Before multi-stage Builder pattern Multi-stage builds Multi-stage build example Multi-statge 유용한 기능들 빌드 단계 이름 지정 특정 빌드 단계에서 중지 외부 이미지를 스테이지로 사용 이전 스테이지를 새 스테이지로 사용 응용 예제 Buildkit 활용 Reference 1. Before multi-stage builds(Builder pattern) Multi-stage bu... </summary> </entry> <entry><title>[Docker] Best practices for Dockerfile - (3/3)</title><link href="https://whdvlf94.github.io/posts/best-practices-for-dockerfiles/" rel="alternate" type="text/html" title="[Docker] Best practices for Dockerfile - (3/3)" /><published>2023-08-17T00:00:00+09:00</published> <updated>2023-08-17T20:42:44+09:00</updated> <id>https://whdvlf94.github.io/posts/best-practices-for-dockerfiles/</id> <content src="https://whdvlf94.github.io/posts/best-practices-for-dockerfiles/" /> <author> <name>JongPil Yoon</name> </author> <category term="Infra" /> <category term="Docker" /> <summary> 목차 Layer 최적화 Docker 이미지 저장 방식 레이어 수 줄이기 명령문(Instructions) 정렬 패키지 최소화 애플리케이션 패키지 최소화 OS 패키지 최소화 Reference 1. Layer 수 최소화 1.1 Docker 이미지가 저장되는 방식 Docker 이미지를 빌드하거나 다른 레포지토리로 부터 pull하는 경우 여러 hash 형태의 문자열이 화면에 보이는 것을 확인할 수 있다. $ docker pull ubuntu:15.04 Using default tag: latest latest: Pulling from library/ubuntu c499e6d256d6: Alr... </summary> </entry> <entry><title>[Python] Python 비동기 asyncio 사용하기</title><link href="https://whdvlf94.github.io/posts/python-async/" rel="alternate" type="text/html" title="[Python] Python 비동기 asyncio 사용하기" /><published>2023-05-05T00:00:00+09:00</published> <updated>2023-07-13T01:00:53+09:00</updated> <id>https://whdvlf94.github.io/posts/python-async/</id> <content src="https://whdvlf94.github.io/posts/python-async/" /> <author> <name>JongPil Yoon</name> </author> <category term="Programming" /> <category term="Python" /> <summary> 목차 Python WAS CGI, FastCGI WSGI ASGI Python 비동기란? 코루틴 네이티브 코루틴 GIL 이란? 왜 asyncio를 사용해야 하는가? asyncio 사용하기 async/await asyncio.create_task() asyncio.gather() loop.run_inexecutor() Reference 1. Python WAS? Python에서는 Tomcat과 같은 WAS가 별도로 존재하지 않는다. 그렇다면 어떤 방법으로 웹서버와 Python 애플리케이션을 연결할 수 있을까? ... </summary> </entry> <entry><title>[Python] __hash__ 및 __eq__를 사용한 Python 해싱 및 동등성 이해</title><link href="https://whdvlf94.github.io/posts/python-hash/" rel="alternate" type="text/html" title="[Python] __hash__ 및 __eq__를 사용한 Python 해싱 및 동등성 이해" /><published>2023-01-26T00:00:00+09:00</published> <updated>2023-01-26T00:00:00+09:00</updated> <id>https://whdvlf94.github.io/posts/python-hash/</id> <content src="https://whdvlf94.github.io/posts/python-hash/" /> <author> <name>JongPil Yoon</name> </author> <category term="Programming" /> <category term="Python" /> <summary> 목차 eq 연산자 hash 연산자 Reference 1. __eq__ 연산자와 is python에서 __eq__ 연산자는 == 연산자를 오버로딩(Overloading)하는 방법이다. class SomeClass: ... def __eq__(self, other): #매개변수 재정의에 따른 오버로딩 # return True if this object # is equal to other and False # otherwise. ... 만약, 사용자 지정 클래스에서 __eq__ 메서드를 구현하지 않는다면 해당 클래스에서 생성된 객체는 is 연산자와 == 연산자가 동일하게 동작한다. 즉, 객체가 동일한지 확인만 하고 클래스... </summary> </entry> </feed>
